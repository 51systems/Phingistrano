<?xml version="1.0" encoding="UTF-8"?>
<project name="deploy" description="utilities for deploying projects" default="do" >

    <!-- deploy properties -->
    <property name="deploy.branch"       value="master" />
    <property name="deploy.cacheexists"  value="false" override="true" />
    <property name="deploy.log"          value="2&gt;&amp;1 | tee ${deploy.path}/deploy.log" />
    <property name="deploy.strategy"     value="distributed" />
    <property name="deploy.history"      value="5" />
    <property name="deploy.sshlib"       value="" />
    
    <!-- ============================================  -->
    <!-- Custom Taskdefs                               -->
    <!-- ============================================  -->
    <taskdef classpath="${phingistrano.dir}" classname="deploy.NetSshTask"   name="netssh" />
    <taskdef classpath="${phingistrano.dir}" classname="deploy.NetScpTask"   name="netscp" />

    <!-- ============================================  -->
    <!-- Target: do                                    -->
    <!-- ============================================  -->
    <target name="do" >
        <if>
            <equals arg1="${deploy.strategy}" arg2="distributed" />
            <then>
                <echo msg="executing distributed deployment ... " />
                <echo msg="============================ " />
                <phingcall target="deploy.distributed" />
            </then>
            <elseif>
                <equals arg1="${deploy.strategy}" arg2="direct" />
              <then>
                <echo msg="executing direct deployment ... " />
                <echo msg="============================ " />
                <foreach list="${deploy.servers}"
                         param="deploy.server"
                         target="deploy.direct" />
              </then>
            </elseif>
            <else>
                <fail message="No legal deploy strategy selected" />
            </else>
        </if>
    </target>

    <!-- ============================================  -->
    <!-- Target: distributed                           -->
    <!-- ============================================  -->

    <target name="distributed" depends="deploy.prepare.distributed" >

        <!-- fetch origin -->
        <exec dir="${project.basedir}/${build.target}/cached-copy"
              outputProperty="fetchresult"
              command="git fetch origin" />

        <!-- resolve revision hash -->
        <exec dir="${project.basedir}/${build.target}/cached-copy"
              outputProperty="deploy.revision"
              command="git rev-parse origin/${deploy.branch}" />

        <echo msg="resolved revision of ${deploy.branch} as: ${deploy.revision}" />

        <!-- checkout revision -->
        <exec dir="${project.basedir}/${build.target}/cached-copy"
              outputProperty="resetresult"
              command="git checkout -q -f ${deploy.revision}" />

        <echo msg="${resetresult}" />

        <php function="strrpos" returnProperty="pass">
            <param value="${checkoutresult}" />
            <param value="error" />
        </php>

        <exec outputProperty="submodulesyncresult"
              dir="${project.basedir}/${build.target}/cached-copy"
              command="for mod in `git submodule status | awk '{ print $2 }'`; do
                        git config -f .git/config submodule.&#36;{mod}.url
                        `git config -f .gitmodules --get submodule.&#36;{mod}.url`;
                       done;" />


        <!-- Update Submodules -->
        <exec outputProperty="submoduleupdateresult"
              dir="${project.basedir}/${build.target}/cached-copy"
              command="git submodule update" />

       <!-- Post-Cache Hook -->
       <phingcall target="postcache" />

        <exec command="cp -R ${project.basedir}/${build.target}/cached-copy
                       ${project.basedir}/${build.target}/tmp" />
        
        <!-- strip git overhead -->
	    <exec dir="${project.basedir}/${build.target}/tmp"
	          command="for i in `find . -name .git` ; do
	                    rm -rf $i;
	                   done"  />

        <!-- create tarball with downloaded repository -->
        <php function="date" returnProperty="deploy.ts" >
            <param value="YmdHis" />
        </php>

        <property name="deploy.tarball" override="true"
                  value="${deploy.ts}.${deploy.branch}.tar.gz" />

        <php function="str_replace" returnProperty="deploy.tarball" >
            <param value="/" />
            <param value="-" />
            <param value="${deploy.tarball}" />
        </php>

        <tar destfile="${project.basedir}/${build.target}/tarballs/${deploy.tarball}"
             basedir="${project.basedir}/${build.target}/tmp"
             compression="gzip" />

        <delete dir="${project.basedir}/${build.target}/tmp"
                includeemptydirs="true"
                verbose="false"
                failonerror="false" />

    <!-- echo info about the package -->
	<filesize file="${project.basedir}/${build.target}/tarballs/${deploy.tarball}" />
        <php expression="floor(${filesize}/1024)" returnProperty="ksize" />
        <php expression="floor(${filesize}/1024/1024)" returnProperty="msize" />
        <echo msg="Filesize is: ${ksize} Kb"/>
        <echo msg="Filesize is: ${msize} Mb"/>

        <!-- transfer the file via scp -->
        <foreach list="${deploy.servers}" param="deploy.server" target="deploy.deliver" />

    </target>

    <!-- ============================================  -->
    <!-- Target: direct                                -->
    <!-- ============================================  -->
    <target name="direct" depends="deploy.convert">

        <!-- link it up -->
         <netssh username="${deploy.user}"
              password="${deploy.password}"
              host="${deploy.server}"
              sshlib="${deploy.sshlib}"
              command="rm ${deploy.path}/current ${deploy.log};
                       ln -s ${deploy.path}/releases/${deploy.ts}
                       ${deploy.path}/current ${deploy.log}; " />

         <!-- deposit the deploy log in the log folder -->
         <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="cp ${deploy.path}/deploy.log
                      ${deploy.path}/${build.target}/logs/deploy/${deploy.ts}.deploy.log;
                      cp ${deploy.path}/deploy.log
                      ${deploy.path}/releases/${deploy.ts}/log/${deploy.ts}.deploy.log;
                      rm ${deploy.path}/deploy.log; " />
                      
        <!-- remove extra backissue if deploy.backissue is a value -->
        <php expression="(strnatcasecmp('${deploy.history}','1') &gt;=0)?'true':'false'"
             returnProperty="deploy.removehistory" />
        <if>
            <istrue value="${deploy.removehistory}"/>
            <then>
            <netssh username="${deploy.user}"
                 password="${deploy.password}"
                 host="${deploy.server}"
                 sshlib="${deploy.sshlib}"
                 command="(
                 cd ${deploy.path}/releases &amp;&amp;
                 for dir in * ; do
                    echo &#34;&#36;&#123;dir&#125;&#34;;
                 done | sort -n | head -n -${deploy.history} | xargs -I '%' rm -rf '%'
                 )" />
            </then>
        </if>

    </target >

    <!-- ============================================  -->
    <!-- Target: prepare.distributed                   -->
    <!-- ============================================  -->
    <target name="prepare.distributed" >

        <available file="${project.basedir}/${build.target}/cached-copy"
                   property="deploy.cacheexists"
                   value="true"/>

        <if>
            <isfalse value="${deploy.cacheexists}"/>
            <then>
                <!-- create required directories -->
                <mkdir dir="${project.basedir}/${build.target}" />
                <mkdir dir="${project.basedir}/${build.target}/tarballs" />
                <mkdir dir="${project.basedir}/${build.target}/logs/deploy" />

                <!-- clone repository -->
                <exec outputProperty="cloneresult"
                      command="git clone -q --depth 1 ${deploy.repository}
                               ${project.basedir}/${build.target}/cached-copy" />

                <echo msg="${cloneresult}" />

                <!-- Init Submodules -->
                <exec outputProperty="submoduleinitresult"
                      dir="${project.basedir}/${build.target}/cached-copy"
                      command="git submodule init" />

                <echo msg="${submoduleinitresult}"/>
            </then>
        </if>
        
        <!-- Pre-Cache Hook -->
        <phingcall target="precache" />
    </target>

    <!-- ============================================  -->
    <!-- Target: prepare.direct                        -->
    <!-- ============================================  -->
    <target name="prepare.direct" >

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="if [ ! -d ${deploy.path}/${build.target}/cached-copy ]; then
                        git clone -q --depth 1 ${deploy.repository}
                        ${deploy.path}/${build.target}/cached-copy ${deploy.log};
                        (cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                        git submodule init) ${deploy.log};
                      fi; " />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="mkdir -p ${deploy.path}/${build.target}/tarballs ${deploy.log};" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="mkdir -p ${deploy.path}/${build.target}/logs/deploy ${deploy.log};" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="mkdir -p ${deploy.path}/releases  ${deploy.log};" />
             
        <!-- Pre-Cache Hook -->
        <phingcall target="precache" />

    </target>

    <!-- ============================================  -->
    <!-- Target: convert                               -->
    <!-- ============================================  -->
    <target name="convert" depends="deploy.prepare.direct" >

         <!-- set up unique name and tarball name -->
         <php function="date" returnProperty="deploy.ts" >
            <param value="YmdHis" />
        </php>

        <property name="deploy.tarball"  override="true"
                  value="${deploy.ts}.${deploy.branch}.tar.gz"  />

        <php function="str_replace" returnProperty="deploy.tarball" >
            <param value="/" />
            <param value="-" />
            <param value="${deploy.tarball}" />
        </php>

        <!-- update the repository and reset it to the current revision -->
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="(cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                      git fetch origin) ${deploy.log};
                      echo Found current branch is ${deploy.branch} ${deploy.log};
                      (cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                      REV=$(git rev-parse origin/${deploy.branch}) &amp;&amp;
                      echo Found revision is $REV &amp;&amp;
                      cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                      git checkout -f $REV) ${deploy.log}; " />

        <!-- reset submodules to their appropriate revisions -->
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="for mod in `(cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                      git submodule status | awk '{ print $2 }')`; do
                        (cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                        git config -f .git/config submodule.&#36;{mod}.url
                        `git config -f .gitmodules --get submodule.&#36;{mod}.url`)
                        ${deploy.log};
                      done;" />

        <!-- update submodules -->
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="(cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                       git submodule update) ${deploy.log}; " />
                       
        <!-- Post-Cache Hook -->
        <phingcall target="postcache" />

        <!-- make deployment directory and tarball archive -->
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="mkdir ${deploy.path}/releases/${deploy.ts} ${deploy.log};
                      cp -R ${deploy.path}/${build.target}/cached-copy/*
                      ${deploy.path}/releases/${deploy.ts} ${deploy.log};
                      for i in `find ${deploy.path}/releases/${deploy.ts} -name .git` ; do
                        rm -rf $i ${deploy.log};
                      done;
                      rm -rf ${deploy.path}/releases/${deploy.ts}/${build.target} ${deploy.log};
                      (cd ${deploy.path}/${build.target}/cached-copy &amp;&amp;
                      REV=$(git rev-parse origin/${deploy.branch}) &amp;&amp;
                      echo $REV > ${deploy.path}/releases/${deploy.ts}/REVISION);
                      tar czf ${deploy.path}/${build.target}/tarballs/${deploy.tarball}
                      ${deploy.path}/releases/${deploy.ts} ${deploy.log};"/>

        <!-- print filesize info -->
        <netssh username="${deploy.user}"
              password="${deploy.password}"
              host="${deploy.server}"
              sshlib="${deploy.sshlib}"
              command="echo File size ${deploy.log};
                       echo ============== ${deploy.log};
                       B=$(stat -c %s ${deploy.path}/${build.target}/tarballs/${deploy.tarball});
                       KB=$(($B / 1024));
                       echo $KB Kb ${deploy.log};
                       MB=$(($KB / 1024));
                       echo $MB Mb ${deploy.log};" />

    </target>

    <!-- ============================================  -->
    <!-- Target: deliver                               -->
    <!-- ============================================  -->
    <target name="deliver" depends="deploy.upload" >

        <!-- create target directory -->
        <echo msg="creating directory: ${deploy.path}/releases/${deploy.ts}" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="mkdir -p ${deploy.path}/releases/${deploy.ts}" />

        <!-- unpack tarball -->
        <echo msg="unpacking: ${project.basedir}/tarballs/${deploy.tarball}
                   to remote location: ${deploy.server}:
                   ${deploy.path}/releases/${deploy.ts}" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="tar -xvf ${deploy.path}/${deploy.tarball} --directory=${deploy.path}/releases/${deploy.ts}" />

        <!-- delete tarball -->
        <echo msg="deleting tarball: ${deploy.path}/${deploy.tarball}" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="rm ${deploy.path}/${deploy.tarball}" />

        <!-- link it -->
        <echo msg="deleting symlink: ${deploy.path}/current" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="rm ${deploy.path}/current" />

        <echo msg="creating new symlink: ${deploy.path}/current" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="ln -s ${deploy.path}/releases/${deploy.ts}
                      ${deploy.path}/current" />

        <!-- revision tag -->
        <echo msg="placing hash in REVISION: ${deploy.revision}" />

        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="echo ${deploy.revision} > ${deploy.path}/current/REVISION" />
        
        <!-- remove extra backissue if deploy.backissue is a value -->
        <php expression="(strnatcasecmp('${deploy.history}','1') &gt;=0)?'true':'false'"
             returnProperty="deploy.removehistory" />
        <if>
            <istrue value="${deploy.removehistory}"/>
            <then>
            <netssh username="${deploy.user}"
                 password="${deploy.password}"
                 host="${deploy.server}"
                 sshlib="${deploy.sshlib}"
                 command="(
                 cd ${deploy.path}/releases &amp;&amp;
                 for dir in * ; do
                    echo &#34;&#36;&#123;dir&#125;&#34;;
                 done | sort -n | head -n -${deploy.history} | xargs -I '%' rm -rf '%'
                 )" />
            </then>
        </if>
    </target>

    <!-- ============================================  -->
    <!-- Target: upload                                -->
    <!-- ============================================  -->
    <target name="upload" >

        <echo msg="uploading: ${project.basedir}/${build.target}/tarballs/${deploy.tarball}" />

        <echo msg="to server: ${deploy.server}" />

        <netscp username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             todir="${deploy.path}"
             file="${project.basedir}/${build.target}/tarballs/${deploy.tarball}" />

    </target>

    <!-- ============================================  -->
    <!-- Target: currentbranch                         -->
    <!-- ============================================  -->
    <target name="currentbranch" >

        <exec dir="${project.basedir}"
              outputProperty="my.branch"
              command="git branch -a | grep \* " />

        <php function="str_replace" returnProperty="my.branch" >
            <param value="* " />
            <param value="" />
            <param value="${my.branch}" />
        </php>

        <if>
            <equals arg1="${my.branch}" arg2="&#40;no branch&#41;" />
            <then>
                <property override="true" name="deploy.branch" value="develop" />
            </then>
            <else>
                <property override="true" name="deploy.branch" value="${my.branch}" />
            </else>
        </if>

        <echo msg="current branch: ${deploy.branch}" />

    </target>

    <!-- ============================================  -->
    <!-- Target: clean                                 -->
    <!-- ============================================  -->
    <target name="clean" >

        <delete dir="${project.basedir}/${build.target}/cached-copy" />

    </target>

    <!-- ============================================  -->
    <!-- Target: memcachedump                          -->
    <!-- ============================================  -->
    <target name="memcachedump" >
        <foreach list="${deploy.servers}" param="deploy.server" target="deploy.memcached" />
    </target>

    <!-- ============================================  -->
    <!-- Target: memcached                             -->
    <!-- ============================================  -->
    <target name="memcached" >
        <echo msg="restarting memcached" />
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="echo ${deploy.password} | sudo -S /etc/init.d/memcached restart" />
    </target>

    <!-- ============================================  -->
    <!-- Target: remote                                -->
    <!-- ============================================  -->
    <target name="remote" >
        <input propertyname="command">Enter command: </input>
        <foreach list="${deploy.servers}" param="deploy.server" target="deploy.remotecmd" />
    </target>

    <!-- ============================================  -->
    <!-- Target: remotecmd                                -->
    <!-- ============================================  -->
    <target name="remotecmd" >
        <echo msg="${deploy.user}&#64;${deploy.server}&#36; ${command}" />
        <netssh username="${deploy.user}"
             password="${deploy.password}"
             host="${deploy.server}"
             sshlib="${deploy.sshlib}"
             command="echo ${deploy.password} | ${command}" />
    </target>

    <!-- ============================================  -->
    <!-- Target: verbose                               -->
    <!-- ============================================  -->
    <target name="verbose" >

        <echo msg="\\== deploying with the following properties ==//" />
        <echo msg="Project: ${phing.project.name}" />
        <echo msg="repository: ${deploy.repository}" />
        <echo msg="user: ${deploy.user}" />
        <echo msg="password: ${deploy.password}" />
        <echo msg="branch: ${deploy.branch}" />
        <echo msg="deploy path: ${deploy.path}" />
        <echo msg="deploy log: ${deploy.log}" />
        <echo msg="servers: ${deploy.servers}" />

    </target>

</project>
